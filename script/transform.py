import numpy as np
from scipy.spatial.transform import Rotation as R


# OpenLoris
# d400_cam_to_odom = np.array([[9.9792816252667338e-03, 6.5348103708624539e-03, 9.9992885256485176e-01, 2.2648368490900000e-01],
#                              [-9.9982014658446139e-01, 1.6192923276330706e-02, 9.8723715283343672e-03, -5.1141940356500000e-02],
#                              [-1.6127257115523985e-02, -9.9984753112121250e-01, 6.6952288046080444e-03, 9.1600000000000004e-01],
#                              [0.0, 0.0, 0.0, 1.0]])
#
# d400_acc_to_d400_cam = np.array([[9.9997545291464240e-01, 3.8491408362146826e-03, 5.8547145941429879e-03, 2.0312793552875500e-02],
#                                 [-3.8286801217887346e-03, 9.9998653870758514e-01, -3.5019440527251228e-03, 5.1032523624599000e-03],
#                                 [-5.8681152579773141e-03, 3.4794422608202015e-03, 9.9997672908166857e-01, 1.1201388202607600e-02],
#                                 [0.0, 0.0, 0.0, 1.0]])
#
# d400_cam_to_d400_acc = np.linalg.inv(d400_acc_to_d400_cam)
#
# odom_to_d400_cam = np.linalg.inv(d400_cam_to_odom)
#
# odom_to_d400_acc = np.dot(d400_cam_to_d400_acc, odom_to_d400_cam)
#
# print(d400_cam_to_d400_acc)

def quat_to_rotation_matrix():

    r = R.from_quat([-0.5, 0.5, -0.5, 0.5])
    print(r.as_matrix())


if __name__ == '__main__':
    quat_to_rotation_matrix()

